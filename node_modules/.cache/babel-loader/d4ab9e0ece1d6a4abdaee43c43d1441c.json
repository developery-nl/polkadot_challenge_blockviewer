{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0; // Copyright 2017-2020 @polkadot/types authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n// order important in structs... :)\n\n/* eslint-disable sort-keys */\n\nvar _default = {\n  rpc: {\n    call: {\n      description: 'Executes a call to a contract',\n      params: [{\n        name: 'callRequest',\n        type: 'ContractCallRequest'\n      }, {\n        name: 'at',\n        type: 'BlockHash',\n        isHistoric: true,\n        isOptional: true\n      }],\n      type: 'ContractExecResult'\n    },\n    getStorage: {\n      description: 'Returns the value under a specified storage key in a contract',\n      params: [{\n        name: 'address',\n        type: 'AccountId'\n      }, {\n        name: 'key',\n        type: 'H256'\n      }, {\n        name: 'at',\n        type: 'BlockHash',\n        isHistoric: true,\n        isOptional: true\n      }],\n      type: 'Option<Bytes>'\n    },\n    rentProjection: {\n      description: 'Returns the projected time a given contract will be able to sustain paying its rent',\n      params: [{\n        name: 'address',\n        type: 'AccountId'\n      }, {\n        name: 'at',\n        type: 'BlockHash',\n        isHistoric: true,\n        isOptional: true\n      }],\n      type: 'Option<BlockNumber>'\n    }\n  },\n  types: {\n    AliveContractInfo: {\n      trieId: 'TrieId',\n      storageSize: 'u32',\n      codeHash: 'CodeHash',\n      rentAllowance: 'Balance',\n      deductBlock: 'BlockNumber',\n      lastWrite: 'Option<BlockNumber>'\n    },\n    CodeHash: 'Hash',\n    ContractCallRequest: {\n      origin: 'AccountId',\n      dest: 'AccountId',\n      value: 'Balance',\n      gasLimit: 'u64',\n      inputData: 'Bytes'\n    },\n    ContractExecResultSuccessTo255: {\n      status: 'u8',\n      data: 'Raw'\n    },\n    ContractExecResultTo255: {\n      _enum: {\n        Success: 'ContractExecResultSuccessTo255',\n        Error: 'Null'\n      }\n    },\n    ContractExecResultSuccess: {\n      flags: 'u32',\n      data: 'Vec<u8>',\n      gasConsumed: 'u64'\n    },\n    ContractExecResult: {\n      _enum: {\n        Success: 'ContractExecResultSuccess',\n        Error: 'Null'\n      }\n    },\n    ContractInfo: {\n      _enum: {\n        Alive: 'AliveContractInfo',\n        Tombstone: 'TombstoneContractInfo'\n      }\n    },\n    ContractStorageKey: '[u8; 32]',\n    Gas: 'u64',\n    PrefabWasmModule: {\n      scheduleVersion: 'Compact<u32>',\n      initial: 'Compact<u32>',\n      maximum: 'Compact<u32>',\n      _reserved: 'PrefabWasmModuleReserved',\n      code: 'Bytes'\n    },\n    PrefabWasmModuleReserved: 'Option<Null>',\n    ScheduleTo212: {\n      version: 'u32',\n      putCodePerByteCost: 'Gas',\n      growMemCost: 'Gas',\n      regularOpCost: 'Gas',\n      returnDataPerByteCost: 'Gas',\n      eventDataPerByteCost: 'Gas',\n      eventPerTopicCost: 'Gas',\n      eventBaseCost: 'Gas',\n      sandboxDataReadCost: 'Gas',\n      sandboxDataWriteCost: 'Gas',\n      maxEventTopics: 'u32',\n      maxStackHeight: 'u32',\n      maxMemoryPages: 'u32',\n      enablePrintln: 'bool',\n      maxSubjectLen: 'u32'\n    },\n    Schedule: {\n      version: 'u32',\n      putCodePerByteCost: 'Gas',\n      growMemCost: 'Gas',\n      regularOpCost: 'Gas',\n      returnDataPerByteCost: 'Gas',\n      eventDataPerByteCost: 'Gas',\n      eventPerTopicCost: 'Gas',\n      eventBaseCost: 'Gas',\n      sandboxDataReadCost: 'Gas',\n      sandboxDataWriteCost: 'Gas',\n      transferCost: 'Gas',\n      maxEventTopics: 'u32',\n      maxStackHeight: 'u32',\n      maxMemoryPages: 'u32',\n      enablePrintln: 'bool',\n      maxSubjectLen: 'u32'\n    },\n    SeedOf: 'Hash',\n    TombstoneContractInfo: 'Hash',\n    TrieId: 'Bytes'\n  }\n};\nexports.default = _default;","map":{"version":3,"sources":["/home/michiel/Downloads/polkabasics-main/node_modules/@polkadot/types/interfaces/contracts/definitions.js"],"names":["Object","defineProperty","exports","value","default","_default","rpc","call","description","params","name","type","isHistoric","isOptional","getStorage","rentProjection","types","AliveContractInfo","trieId","storageSize","codeHash","rentAllowance","deductBlock","lastWrite","CodeHash","ContractCallRequest","origin","dest","gasLimit","inputData","ContractExecResultSuccessTo255","status","data","ContractExecResultTo255","_enum","Success","Error","ContractExecResultSuccess","flags","gasConsumed","ContractExecResult","ContractInfo","Alive","Tombstone","ContractStorageKey","Gas","PrefabWasmModule","scheduleVersion","initial","maximum","_reserved","code","PrefabWasmModuleReserved","ScheduleTo212","version","putCodePerByteCost","growMemCost","regularOpCost","returnDataPerByteCost","eventDataPerByteCost","eventPerTopicCost","eventBaseCost","sandboxDataReadCost","sandboxDataWriteCost","maxEventTopics","maxStackHeight","maxMemoryPages","enablePrintln","maxSubjectLen","Schedule","transferCost","SeedOf","TombstoneContractInfo","TrieId"],"mappings":"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","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n// Copyright 2017-2020 @polkadot/types authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n// order important in structs... :)\n\n/* eslint-disable sort-keys */\nvar _default = {\n  rpc: {\n    call: {\n      description: 'Executes a call to a contract',\n      params: [{\n        name: 'callRequest',\n        type: 'ContractCallRequest'\n      }, {\n        name: 'at',\n        type: 'BlockHash',\n        isHistoric: true,\n        isOptional: true\n      }],\n      type: 'ContractExecResult'\n    },\n    getStorage: {\n      description: 'Returns the value under a specified storage key in a contract',\n      params: [{\n        name: 'address',\n        type: 'AccountId'\n      }, {\n        name: 'key',\n        type: 'H256'\n      }, {\n        name: 'at',\n        type: 'BlockHash',\n        isHistoric: true,\n        isOptional: true\n      }],\n      type: 'Option<Bytes>'\n    },\n    rentProjection: {\n      description: 'Returns the projected time a given contract will be able to sustain paying its rent',\n      params: [{\n        name: 'address',\n        type: 'AccountId'\n      }, {\n        name: 'at',\n        type: 'BlockHash',\n        isHistoric: true,\n        isOptional: true\n      }],\n      type: 'Option<BlockNumber>'\n    }\n  },\n  types: {\n    AliveContractInfo: {\n      trieId: 'TrieId',\n      storageSize: 'u32',\n      codeHash: 'CodeHash',\n      rentAllowance: 'Balance',\n      deductBlock: 'BlockNumber',\n      lastWrite: 'Option<BlockNumber>'\n    },\n    CodeHash: 'Hash',\n    ContractCallRequest: {\n      origin: 'AccountId',\n      dest: 'AccountId',\n      value: 'Balance',\n      gasLimit: 'u64',\n      inputData: 'Bytes'\n    },\n    ContractExecResultSuccessTo255: {\n      status: 'u8',\n      data: 'Raw'\n    },\n    ContractExecResultTo255: {\n      _enum: {\n        Success: 'ContractExecResultSuccessTo255',\n        Error: 'Null'\n      }\n    },\n    ContractExecResultSuccess: {\n      flags: 'u32',\n      data: 'Vec<u8>',\n      gasConsumed: 'u64'\n    },\n    ContractExecResult: {\n      _enum: {\n        Success: 'ContractExecResultSuccess',\n        Error: 'Null'\n      }\n    },\n    ContractInfo: {\n      _enum: {\n        Alive: 'AliveContractInfo',\n        Tombstone: 'TombstoneContractInfo'\n      }\n    },\n    ContractStorageKey: '[u8; 32]',\n    Gas: 'u64',\n    PrefabWasmModule: {\n      scheduleVersion: 'Compact<u32>',\n      initial: 'Compact<u32>',\n      maximum: 'Compact<u32>',\n      _reserved: 'PrefabWasmModuleReserved',\n      code: 'Bytes'\n    },\n    PrefabWasmModuleReserved: 'Option<Null>',\n    ScheduleTo212: {\n      version: 'u32',\n      putCodePerByteCost: 'Gas',\n      growMemCost: 'Gas',\n      regularOpCost: 'Gas',\n      returnDataPerByteCost: 'Gas',\n      eventDataPerByteCost: 'Gas',\n      eventPerTopicCost: 'Gas',\n      eventBaseCost: 'Gas',\n      sandboxDataReadCost: 'Gas',\n      sandboxDataWriteCost: 'Gas',\n      maxEventTopics: 'u32',\n      maxStackHeight: 'u32',\n      maxMemoryPages: 'u32',\n      enablePrintln: 'bool',\n      maxSubjectLen: 'u32'\n    },\n    Schedule: {\n      version: 'u32',\n      putCodePerByteCost: 'Gas',\n      growMemCost: 'Gas',\n      regularOpCost: 'Gas',\n      returnDataPerByteCost: 'Gas',\n      eventDataPerByteCost: 'Gas',\n      eventPerTopicCost: 'Gas',\n      eventBaseCost: 'Gas',\n      sandboxDataReadCost: 'Gas',\n      sandboxDataWriteCost: 'Gas',\n      transferCost: 'Gas',\n      maxEventTopics: 'u32',\n      maxStackHeight: 'u32',\n      maxMemoryPages: 'u32',\n      enablePrintln: 'bool',\n      maxSubjectLen: 'u32'\n    },\n    SeedOf: 'Hash',\n    TombstoneContractInfo: 'Hash',\n    TrieId: 'Bytes'\n  }\n};\nexports.default = _default;"]},"metadata":{},"sourceType":"script"}