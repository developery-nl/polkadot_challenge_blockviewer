{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _classPrivateFieldLooseBase2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classPrivateFieldLooseBase\"));\n\nvar _classPrivateFieldLooseKey2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classPrivateFieldLooseKey\"));\n\nvar _util = require(\"@polkadot/util\");\n\nvar _Null = _interopRequireDefault(require(\"../primitive/Null\"));\n\nvar _utils = require(\"./utils\");\n\nvar _Raw = _interopRequireDefault(require(\"./Raw\"));\n\nvar _Struct = _interopRequireDefault(require(\"./Struct\")); // Copyright 2017-2020 @polkadot/types authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n\n\nfunction extractDef(registry, _def) {\n  if (!Array.isArray(_def)) {\n    const def = (0, _utils.mapToTypeMap)(registry, _def);\n    const isBasic = !Object.values(def).some(type => type !== _Null.default);\n    return {\n      def,\n      isBasic\n    };\n  }\n\n  return {\n    def: _def.reduce((def, key) => {\n      def[key] = _Null.default;\n      return def;\n    }, {}),\n    isBasic: true\n  };\n}\n\nfunction createFromValue(registry, def, index = 0, value) {\n  const Clazz = Object.values(def)[index];\n  (0, _util.assert)(!(0, _util.isUndefined)(Clazz), `Unable to create Enum via index ${index}, in ${Object.keys(def).join(', ')}`);\n  return {\n    index,\n    value: value instanceof Clazz ? value : new Clazz(registry, value)\n  };\n}\n\nfunction decodeFromJSON(registry, def, key, value) {\n  // JSON comes in the form of { \"<type (lowercased)>\": \"<value for type>\" }, here we\n  // additionally force to lower to ensure forward compat\n  const keys = Object.keys(def).map(k => k.toLowerCase());\n  const keyLower = key.toLowerCase();\n  const index = keys.indexOf(keyLower);\n  (0, _util.assert)(index !== -1, `Cannot map Enum JSON, unable to find '${key}' in ${keys.join(', ')}`);\n  return createFromValue(registry, def, index, value);\n}\n\nfunction decodeFromString(registry, def, value) {\n  return (0, _util.isHex)(value) // eslint-disable-next-line @typescript-eslint/no-use-before-define\n  ? decodeFromValue(registry, def, (0, _util.hexToU8a)(value)) : decodeFromJSON(registry, def, value);\n}\n\nfunction decodeFromValue(registry, def, value) {\n  if ((0, _util.isU8a)(value)) {\n    return createFromValue(registry, def, value[0], value.subarray(1));\n  } else if ((0, _util.isNumber)(value)) {\n    return createFromValue(registry, def, value);\n  } else if ((0, _util.isString)(value)) {\n    return decodeFromString(registry, def, value.toString());\n  } else if ((0, _util.isObject)(value)) {\n    const key = Object.keys(value)[0];\n    return decodeFromJSON(registry, def, key, value[key]);\n  } // Worst-case scenario, return the first with default\n\n\n  return createFromValue(registry, def, 0);\n}\n\nfunction decodeEnum(registry, def, value, index) {\n  // NOTE We check the index path first, before looking at values - this allows treating\n  // the optional indexes before anything else, more-specific > less-specific\n  if ((0, _util.isNumber)(index)) {\n    return createFromValue(registry, def, index, value); // eslint-disable-next-line @typescript-eslint/no-use-before-define\n  } else if (value instanceof Enum) {\n    return createFromValue(registry, def, value.index, value.value);\n  } // Or else, we just look at `value`\n\n\n  return decodeFromValue(registry, def, value);\n}\n/**\n * @name Enum\n * @description\n * This implements an enum, that based on the value wraps a different type. It is effectively\n * an extension to enum where the value type is determined by the actual index.\n */\n// TODO:\n//   - As per Enum, actually use TS enum\n//   - It should rather probably extend Enum instead of copying code\n\n\nvar _def2 = (0, _classPrivateFieldLooseKey2.default)(\"def\");\n\nvar _index = (0, _classPrivateFieldLooseKey2.default)(\"index\");\n\nvar _indexes = (0, _classPrivateFieldLooseKey2.default)(\"indexes\");\n\nvar _isBasic = (0, _classPrivateFieldLooseKey2.default)(\"isBasic\");\n\nvar _raw = (0, _classPrivateFieldLooseKey2.default)(\"raw\");\n\nclass Enum {\n  constructor(registry, def, value, index) {\n    this.registry = void 0;\n    Object.defineProperty(this, _def2, {\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, _index, {\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, _indexes, {\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, _isBasic, {\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, _raw, {\n      writable: true,\n      value: void 0\n    });\n    const defInfo = extractDef(registry, def);\n    const decoded = decodeEnum(registry, defInfo.def, value, index);\n    this.registry = registry;\n    (0, _classPrivateFieldLooseBase2.default)(this, _def2)[_def2] = defInfo.def;\n    (0, _classPrivateFieldLooseBase2.default)(this, _isBasic)[_isBasic] = defInfo.isBasic;\n    (0, _classPrivateFieldLooseBase2.default)(this, _indexes)[_indexes] = Object.keys(defInfo.def).map((_, index) => index);\n    (0, _classPrivateFieldLooseBase2.default)(this, _index)[_index] = (0, _classPrivateFieldLooseBase2.default)(this, _indexes)[_indexes].indexOf(decoded.index) || 0;\n    (0, _classPrivateFieldLooseBase2.default)(this, _raw)[_raw] = decoded.value;\n  }\n\n  static with(Types) {\n    return class extends Enum {\n      constructor(registry, value, index) {\n        super(registry, Types, value, index);\n        Object.keys((0, _classPrivateFieldLooseBase2.default)(this, _def2)[_def2]).forEach(_key => {\n          const name = (0, _util.stringUpperFirst)((0, _util.stringCamelCase)(_key.replace(' ', '_')));\n          const askey = `as${name}`;\n          const iskey = `is${name}`; // do not clobber existing properties on the object\n          // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n\n          if ((0, _util.isUndefined)(this[iskey])) {\n            Object.defineProperty(this, iskey, {\n              enumerable: true,\n              get: () => this.type === _key\n            });\n          } // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n\n\n          if ((0, _util.isUndefined)(this[askey])) {\n            Object.defineProperty(this, askey, {\n              enumerable: true,\n              get: () => {\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n                (0, _util.assert)(this[iskey], `Cannot convert '${this.type}' via ${askey}`);\n                return this.value;\n              }\n            });\n          }\n        });\n      }\n\n    };\n  }\n  /**\n   * @description The length of the value when encoded as a Uint8Array\n   */\n\n\n  get encodedLength() {\n    return 1 + (0, _classPrivateFieldLooseBase2.default)(this, _raw)[_raw].encodedLength;\n  }\n  /**\n   * @description returns a hash of the contents\n   */\n\n\n  get hash() {\n    return new _Raw.default(this.registry, this.registry.hash(this.toU8a()));\n  }\n  /**\n   * @description The index of the metadata value\n   */\n\n\n  get index() {\n    return (0, _classPrivateFieldLooseBase2.default)(this, _index)[_index];\n  }\n  /**\n   * @description true if this is a basic enum (no values)\n   */\n\n\n  get isBasic() {\n    return (0, _classPrivateFieldLooseBase2.default)(this, _isBasic)[_isBasic];\n  }\n  /**\n   * @description Checks if the value is an empty value\n   */\n\n\n  get isEmpty() {\n    return (0, _classPrivateFieldLooseBase2.default)(this, _raw)[_raw].isEmpty;\n  }\n  /**\n   * @description Checks if the Enum points to a [[Null]] type\n   */\n\n\n  get isNone() {\n    return this.isNull;\n  }\n  /**\n   * @description Checks if the Enum points to a [[Null]] type (deprecated, use isNone)\n   */\n\n\n  get isNull() {\n    return (0, _classPrivateFieldLooseBase2.default)(this, _raw)[_raw] instanceof _Null.default;\n  }\n  /**\n   * @description The available keys for this enum\n   */\n\n\n  get defEntries() {\n    return Object.keys((0, _classPrivateFieldLooseBase2.default)(this, _def2)[_def2]);\n  }\n  /**\n   * @description The available keys for this enum\n   */\n\n\n  get defKeys() {\n    return Object.keys((0, _classPrivateFieldLooseBase2.default)(this, _def2)[_def2]);\n  }\n  /**\n   * @description The name of the type this enum value represents\n   */\n\n\n  get type() {\n    return this.defKeys[(0, _classPrivateFieldLooseBase2.default)(this, _index)[_index]];\n  }\n  /**\n   * @description The value of the enum\n   */\n\n\n  get value() {\n    return (0, _classPrivateFieldLooseBase2.default)(this, _raw)[_raw];\n  }\n  /**\n   * @description Compares the value of the input to see if there is a match\n   */\n\n\n  eq(other) {\n    // cater for the case where we only pass the enum index\n    if ((0, _util.isNumber)(other)) {\n      return this.toNumber() === other;\n    } else if ((0, _classPrivateFieldLooseBase2.default)(this, _isBasic)[_isBasic] && (0, _util.isString)(other)) {\n      return this.type === other;\n    } else if ((0, _util.isU8a)(other)) {\n      return !this.toU8a().some((entry, index) => entry !== other[index]);\n    } else if ((0, _util.isHex)(other)) {\n      return this.toHex() === other;\n    } else if (other instanceof Enum) {\n      return this.index === other.index && this.value.eq(other.value);\n    } else if ((0, _util.isObject)(other)) {\n      return this.value.eq(other[this.type]);\n    } // compare the actual wrapper value\n\n\n    return this.value.eq(other);\n  }\n  /**\n   * @description Returns a hex string representation of the value\n   */\n\n\n  toHex() {\n    return (0, _util.u8aToHex)(this.toU8a());\n  }\n  /**\n   * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information\n   */\n\n\n  toHuman(isExtended) {\n    return (0, _classPrivateFieldLooseBase2.default)(this, _isBasic)[_isBasic] ? this.type : {\n      [this.type]: (0, _classPrivateFieldLooseBase2.default)(this, _raw)[_raw].toHuman(isExtended)\n    };\n  }\n  /**\n   * @description Converts the Object to JSON, typically used for RPC transfers\n   */\n\n\n  toJSON() {\n    return (0, _classPrivateFieldLooseBase2.default)(this, _isBasic)[_isBasic] ? this.type : {\n      [this.type]: (0, _classPrivateFieldLooseBase2.default)(this, _raw)[_raw].toJSON()\n    };\n  }\n  /**\n   * @description Returns the number representation for the value\n   */\n\n\n  toNumber() {\n    return (0, _classPrivateFieldLooseBase2.default)(this, _index)[_index];\n  }\n  /**\n   * @description Returns a raw struct representation of the enum types\n   */\n\n\n  _toRawStruct() {\n    return (0, _classPrivateFieldLooseBase2.default)(this, _isBasic)[_isBasic] ? this.defKeys : _Struct.default.typesToMap(this.registry, (0, _classPrivateFieldLooseBase2.default)(this, _def2)[_def2]);\n  }\n  /**\n   * @description Returns the base runtime type name for this instance\n   */\n\n\n  toRawType() {\n    return JSON.stringify({\n      _enum: this._toRawStruct()\n    });\n  }\n  /**\n   * @description Returns the string representation of the value\n   */\n\n\n  toString() {\n    return this.isNull ? this.type : JSON.stringify(this.toJSON());\n  }\n  /**\n   * @description Encodes the value as a Uint8Array as per the SCALE specifications\n   * @param isBare true when the value has none of the type-specific prefixes (internal)\n   */\n\n\n  toU8a(isBare) {\n    return (0, _util.u8aConcat)(new Uint8Array(isBare ? [] : [(0, _classPrivateFieldLooseBase2.default)(this, _indexes)[_indexes][(0, _classPrivateFieldLooseBase2.default)(this, _index)[_index]]]), (0, _classPrivateFieldLooseBase2.default)(this, _raw)[_raw].toU8a(isBare));\n  }\n\n}\n\nexports.default = Enum;","map":{"version":3,"sources":["/home/michiel/Downloads/polkabasics-main/node_modules/@polkadot/types/codec/Enum.js"],"names":["_interopRequireDefault","require","Object","defineProperty","exports","value","default","_classPrivateFieldLooseBase2","_classPrivateFieldLooseKey2","_util","_Null","_utils","_Raw","_Struct","extractDef","registry","_def","Array","isArray","def","mapToTypeMap","isBasic","values","some","type","reduce","key","createFromValue","index","Clazz","assert","isUndefined","keys","join","decodeFromJSON","map","k","toLowerCase","keyLower","indexOf","decodeFromString","isHex","decodeFromValue","hexToU8a","isU8a","subarray","isNumber","isString","toString","isObject","decodeEnum","Enum","_def2","_index","_indexes","_isBasic","_raw","constructor","writable","defInfo","decoded","_","with","Types","forEach","_key","name","stringUpperFirst","stringCamelCase","replace","askey","iskey","enumerable","get","encodedLength","hash","toU8a","isEmpty","isNone","isNull","defEntries","defKeys","eq","other","toNumber","entry","toHex","u8aToHex","toHuman","isExtended","toJSON","_toRawStruct","typesToMap","toRawType","JSON","stringify","_enum","isBare","u8aConcat","Uint8Array"],"mappings":"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","sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _classPrivateFieldLooseBase2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classPrivateFieldLooseBase\"));\n\nvar _classPrivateFieldLooseKey2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classPrivateFieldLooseKey\"));\n\nvar _util = require(\"@polkadot/util\");\n\nvar _Null = _interopRequireDefault(require(\"../primitive/Null\"));\n\nvar _utils = require(\"./utils\");\n\nvar _Raw = _interopRequireDefault(require(\"./Raw\"));\n\nvar _Struct = _interopRequireDefault(require(\"./Struct\"));\n\n// Copyright 2017-2020 @polkadot/types authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nfunction extractDef(registry, _def) {\n  if (!Array.isArray(_def)) {\n    const def = (0, _utils.mapToTypeMap)(registry, _def);\n    const isBasic = !Object.values(def).some(type => type !== _Null.default);\n    return {\n      def,\n      isBasic\n    };\n  }\n\n  return {\n    def: _def.reduce((def, key) => {\n      def[key] = _Null.default;\n      return def;\n    }, {}),\n    isBasic: true\n  };\n}\n\nfunction createFromValue(registry, def, index = 0, value) {\n  const Clazz = Object.values(def)[index];\n  (0, _util.assert)(!(0, _util.isUndefined)(Clazz), `Unable to create Enum via index ${index}, in ${Object.keys(def).join(', ')}`);\n  return {\n    index,\n    value: value instanceof Clazz ? value : new Clazz(registry, value)\n  };\n}\n\nfunction decodeFromJSON(registry, def, key, value) {\n  // JSON comes in the form of { \"<type (lowercased)>\": \"<value for type>\" }, here we\n  // additionally force to lower to ensure forward compat\n  const keys = Object.keys(def).map(k => k.toLowerCase());\n  const keyLower = key.toLowerCase();\n  const index = keys.indexOf(keyLower);\n  (0, _util.assert)(index !== -1, `Cannot map Enum JSON, unable to find '${key}' in ${keys.join(', ')}`);\n  return createFromValue(registry, def, index, value);\n}\n\nfunction decodeFromString(registry, def, value) {\n  return (0, _util.isHex)(value) // eslint-disable-next-line @typescript-eslint/no-use-before-define\n  ? decodeFromValue(registry, def, (0, _util.hexToU8a)(value)) : decodeFromJSON(registry, def, value);\n}\n\nfunction decodeFromValue(registry, def, value) {\n  if ((0, _util.isU8a)(value)) {\n    return createFromValue(registry, def, value[0], value.subarray(1));\n  } else if ((0, _util.isNumber)(value)) {\n    return createFromValue(registry, def, value);\n  } else if ((0, _util.isString)(value)) {\n    return decodeFromString(registry, def, value.toString());\n  } else if ((0, _util.isObject)(value)) {\n    const key = Object.keys(value)[0];\n    return decodeFromJSON(registry, def, key, value[key]);\n  } // Worst-case scenario, return the first with default\n\n\n  return createFromValue(registry, def, 0);\n}\n\nfunction decodeEnum(registry, def, value, index) {\n  // NOTE We check the index path first, before looking at values - this allows treating\n  // the optional indexes before anything else, more-specific > less-specific\n  if ((0, _util.isNumber)(index)) {\n    return createFromValue(registry, def, index, value); // eslint-disable-next-line @typescript-eslint/no-use-before-define\n  } else if (value instanceof Enum) {\n    return createFromValue(registry, def, value.index, value.value);\n  } // Or else, we just look at `value`\n\n\n  return decodeFromValue(registry, def, value);\n}\n/**\n * @name Enum\n * @description\n * This implements an enum, that based on the value wraps a different type. It is effectively\n * an extension to enum where the value type is determined by the actual index.\n */\n// TODO:\n//   - As per Enum, actually use TS enum\n//   - It should rather probably extend Enum instead of copying code\n\n\nvar _def2 = (0, _classPrivateFieldLooseKey2.default)(\"def\");\n\nvar _index = (0, _classPrivateFieldLooseKey2.default)(\"index\");\n\nvar _indexes = (0, _classPrivateFieldLooseKey2.default)(\"indexes\");\n\nvar _isBasic = (0, _classPrivateFieldLooseKey2.default)(\"isBasic\");\n\nvar _raw = (0, _classPrivateFieldLooseKey2.default)(\"raw\");\n\nclass Enum {\n  constructor(registry, def, value, index) {\n    this.registry = void 0;\n    Object.defineProperty(this, _def2, {\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, _index, {\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, _indexes, {\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, _isBasic, {\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, _raw, {\n      writable: true,\n      value: void 0\n    });\n    const defInfo = extractDef(registry, def);\n    const decoded = decodeEnum(registry, defInfo.def, value, index);\n    this.registry = registry;\n    (0, _classPrivateFieldLooseBase2.default)(this, _def2)[_def2] = defInfo.def;\n    (0, _classPrivateFieldLooseBase2.default)(this, _isBasic)[_isBasic] = defInfo.isBasic;\n    (0, _classPrivateFieldLooseBase2.default)(this, _indexes)[_indexes] = Object.keys(defInfo.def).map((_, index) => index);\n    (0, _classPrivateFieldLooseBase2.default)(this, _index)[_index] = (0, _classPrivateFieldLooseBase2.default)(this, _indexes)[_indexes].indexOf(decoded.index) || 0;\n    (0, _classPrivateFieldLooseBase2.default)(this, _raw)[_raw] = decoded.value;\n  }\n\n  static with(Types) {\n    return class extends Enum {\n      constructor(registry, value, index) {\n        super(registry, Types, value, index);\n        Object.keys((0, _classPrivateFieldLooseBase2.default)(this, _def2)[_def2]).forEach(_key => {\n          const name = (0, _util.stringUpperFirst)((0, _util.stringCamelCase)(_key.replace(' ', '_')));\n          const askey = `as${name}`;\n          const iskey = `is${name}`; // do not clobber existing properties on the object\n          // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n\n          if ((0, _util.isUndefined)(this[iskey])) {\n            Object.defineProperty(this, iskey, {\n              enumerable: true,\n              get: () => this.type === _key\n            });\n          } // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n\n\n          if ((0, _util.isUndefined)(this[askey])) {\n            Object.defineProperty(this, askey, {\n              enumerable: true,\n              get: () => {\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n                (0, _util.assert)(this[iskey], `Cannot convert '${this.type}' via ${askey}`);\n                return this.value;\n              }\n            });\n          }\n        });\n      }\n\n    };\n  }\n  /**\n   * @description The length of the value when encoded as a Uint8Array\n   */\n\n\n  get encodedLength() {\n    return 1 + (0, _classPrivateFieldLooseBase2.default)(this, _raw)[_raw].encodedLength;\n  }\n  /**\n   * @description returns a hash of the contents\n   */\n\n\n  get hash() {\n    return new _Raw.default(this.registry, this.registry.hash(this.toU8a()));\n  }\n  /**\n   * @description The index of the metadata value\n   */\n\n\n  get index() {\n    return (0, _classPrivateFieldLooseBase2.default)(this, _index)[_index];\n  }\n  /**\n   * @description true if this is a basic enum (no values)\n   */\n\n\n  get isBasic() {\n    return (0, _classPrivateFieldLooseBase2.default)(this, _isBasic)[_isBasic];\n  }\n  /**\n   * @description Checks if the value is an empty value\n   */\n\n\n  get isEmpty() {\n    return (0, _classPrivateFieldLooseBase2.default)(this, _raw)[_raw].isEmpty;\n  }\n  /**\n   * @description Checks if the Enum points to a [[Null]] type\n   */\n\n\n  get isNone() {\n    return this.isNull;\n  }\n  /**\n   * @description Checks if the Enum points to a [[Null]] type (deprecated, use isNone)\n   */\n\n\n  get isNull() {\n    return (0, _classPrivateFieldLooseBase2.default)(this, _raw)[_raw] instanceof _Null.default;\n  }\n  /**\n   * @description The available keys for this enum\n   */\n\n\n  get defEntries() {\n    return Object.keys((0, _classPrivateFieldLooseBase2.default)(this, _def2)[_def2]);\n  }\n  /**\n   * @description The available keys for this enum\n   */\n\n\n  get defKeys() {\n    return Object.keys((0, _classPrivateFieldLooseBase2.default)(this, _def2)[_def2]);\n  }\n  /**\n   * @description The name of the type this enum value represents\n   */\n\n\n  get type() {\n    return this.defKeys[(0, _classPrivateFieldLooseBase2.default)(this, _index)[_index]];\n  }\n  /**\n   * @description The value of the enum\n   */\n\n\n  get value() {\n    return (0, _classPrivateFieldLooseBase2.default)(this, _raw)[_raw];\n  }\n  /**\n   * @description Compares the value of the input to see if there is a match\n   */\n\n\n  eq(other) {\n    // cater for the case where we only pass the enum index\n    if ((0, _util.isNumber)(other)) {\n      return this.toNumber() === other;\n    } else if ((0, _classPrivateFieldLooseBase2.default)(this, _isBasic)[_isBasic] && (0, _util.isString)(other)) {\n      return this.type === other;\n    } else if ((0, _util.isU8a)(other)) {\n      return !this.toU8a().some((entry, index) => entry !== other[index]);\n    } else if ((0, _util.isHex)(other)) {\n      return this.toHex() === other;\n    } else if (other instanceof Enum) {\n      return this.index === other.index && this.value.eq(other.value);\n    } else if ((0, _util.isObject)(other)) {\n      return this.value.eq(other[this.type]);\n    } // compare the actual wrapper value\n\n\n    return this.value.eq(other);\n  }\n  /**\n   * @description Returns a hex string representation of the value\n   */\n\n\n  toHex() {\n    return (0, _util.u8aToHex)(this.toU8a());\n  }\n  /**\n   * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information\n   */\n\n\n  toHuman(isExtended) {\n    return (0, _classPrivateFieldLooseBase2.default)(this, _isBasic)[_isBasic] ? this.type : {\n      [this.type]: (0, _classPrivateFieldLooseBase2.default)(this, _raw)[_raw].toHuman(isExtended)\n    };\n  }\n  /**\n   * @description Converts the Object to JSON, typically used for RPC transfers\n   */\n\n\n  toJSON() {\n    return (0, _classPrivateFieldLooseBase2.default)(this, _isBasic)[_isBasic] ? this.type : {\n      [this.type]: (0, _classPrivateFieldLooseBase2.default)(this, _raw)[_raw].toJSON()\n    };\n  }\n  /**\n   * @description Returns the number representation for the value\n   */\n\n\n  toNumber() {\n    return (0, _classPrivateFieldLooseBase2.default)(this, _index)[_index];\n  }\n  /**\n   * @description Returns a raw struct representation of the enum types\n   */\n\n\n  _toRawStruct() {\n    return (0, _classPrivateFieldLooseBase2.default)(this, _isBasic)[_isBasic] ? this.defKeys : _Struct.default.typesToMap(this.registry, (0, _classPrivateFieldLooseBase2.default)(this, _def2)[_def2]);\n  }\n  /**\n   * @description Returns the base runtime type name for this instance\n   */\n\n\n  toRawType() {\n    return JSON.stringify({\n      _enum: this._toRawStruct()\n    });\n  }\n  /**\n   * @description Returns the string representation of the value\n   */\n\n\n  toString() {\n    return this.isNull ? this.type : JSON.stringify(this.toJSON());\n  }\n  /**\n   * @description Encodes the value as a Uint8Array as per the SCALE specifications\n   * @param isBare true when the value has none of the type-specific prefixes (internal)\n   */\n\n\n  toU8a(isBare) {\n    return (0, _util.u8aConcat)(new Uint8Array(isBare ? [] : [(0, _classPrivateFieldLooseBase2.default)(this, _indexes)[_indexes][(0, _classPrivateFieldLooseBase2.default)(this, _index)[_index]]]), (0, _classPrivateFieldLooseBase2.default)(this, _raw)[_raw].toU8a(isBare));\n  }\n\n}\n\nexports.default = Enum;"]},"metadata":{},"sourceType":"script"}